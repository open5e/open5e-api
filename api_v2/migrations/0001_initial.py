# Generated by Django 3.2.20 on 2023-09-25 03:04

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Armor',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('grants_stealth_disadvantage', models.BooleanField(default=False, help_text='If the armor results in disadvantage on stealth checks.')),
                ('strength_score_required', models.IntegerField(blank=True, help_text='Strength score required to wear the armor without penalty.', null=True)),
                ('ac_base', models.IntegerField(help_text='Integer representing the armor class without modifiers.')),
                ('ac_add_dexmod', models.BooleanField(default=False, help_text='If the final armor class includes dexterity modifier.')),
                ('ac_cap_dexmod', models.IntegerField(blank=True, help_text='Integer representing the dexterity modifier cap.', null=True)),
            ],
            options={
                'verbose_name_plural': 'armor',
            },
        ),
        migrations.CreateModel(
            name='Creature',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('size', models.IntegerField(choices=[(1, 'Tiny'), (2, 'Small'), (3, 'Medium'), (4, 'Large'), (5, 'Huge'), (6, 'Gargantuan')], default=1, help_text='Integer representing the size of the object.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('weight', models.DecimalField(decimal_places=3, default=0, help_text='Number representing the weight of the object.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('armor_class', models.IntegerField(default=0, help_text='Integer representing the armor class of the object.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('hit_points', models.IntegerField(default=0, help_text='Integer representing the hit points of the object.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('ability_score_strength', models.SmallIntegerField(default=0, help_text='Integer representing the strength ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('ability_score_dexterity', models.SmallIntegerField(default=0, help_text='Integer representing the dexterity ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('ability_score_constitution', models.SmallIntegerField(default=0, help_text='Integer representing the constitution ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('ability_score_intelligence', models.SmallIntegerField(default=0, help_text='Integer representing the intelligence ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('ability_score_wisdom', models.SmallIntegerField(default=0, help_text='Integer representing the wisdom ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('ability_score_charisma', models.SmallIntegerField(default=0, help_text='Integer representing the charisma ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('saving_throw_strength', models.SmallIntegerField(help_text='Signed integer added to strength saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('saving_throw_dexterity', models.SmallIntegerField(help_text='Signed integer added to dexterity saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('saving_throw_constitution', models.SmallIntegerField(help_text='Signed integer added to constitution saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('saving_throw_intelligence', models.SmallIntegerField(help_text='Signed integer added to intelligence saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('saving_throw_wisdom', models.SmallIntegerField(help_text='Signed integer added to wisdom saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('saving_throw_charisma', models.SmallIntegerField(help_text='Signed integer added to charisma saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_acrobatics', models.SmallIntegerField(help_text='Signed integer added to acrobatics skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_animal_handling', models.SmallIntegerField(help_text='Signed integer added to animal handling skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_arcana', models.SmallIntegerField(help_text='Signed integer added to arcana skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_athletics', models.SmallIntegerField(help_text='Signed integer added to athletics skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_deception', models.SmallIntegerField(help_text='Signed integer added to deception skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_history', models.SmallIntegerField(help_text='Signed integer added to history skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_insight', models.SmallIntegerField(help_text='Signed integer added to insight skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_intimidation', models.SmallIntegerField(help_text='Signed integer added to intimidation skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_investigation', models.SmallIntegerField(help_text='Signed integer added to investigation skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_medicine', models.SmallIntegerField(help_text='Signed integer added to medicine skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_nature', models.SmallIntegerField(help_text='Signed integer added to nature skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_perception', models.SmallIntegerField(help_text='Signed integer added to perception skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_performance', models.SmallIntegerField(help_text='Signed integer added to performance skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_persuasion', models.SmallIntegerField(help_text='Signed integer added to persuasion skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_religion', models.SmallIntegerField(help_text='Signed integer added to religion skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_sleight_of_hand', models.SmallIntegerField(help_text='Signed integer added to sleight of hand skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_stealth', models.SmallIntegerField(help_text='Signed integer added to stealth skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_survival', models.SmallIntegerField(help_text='Signed integer added to survival skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('passive_perception', models.SmallIntegerField(default=0, help_text='Integer representing the passive perception ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('category', models.CharField(help_text='What category this creature belongs to.', max_length=100)),
                ('type', models.CharField(choices=[('ABERRATION', 'Aberration'), ('BEAST', 'Beast'), ('CELESTIAL', 'Celestial'), ('CONSTRUCT', 'Construct'), ('DRAGON', 'Dragon'), ('ELEMENTAL', 'Elemental'), ('FEY', 'Fey'), ('FIEND', 'Fiend'), ('GIANT', 'Giant'), ('HUMANOID', 'Humanoid'), ('MONSTROSITY', 'Monstrosity'), ('OOZE', 'Ooze'), ('PLANT', 'Plant'), ('UNDEAD', 'Undead')], help_text='Which type of creature this is.', max_length=20)),
                ('subtype', models.CharField(help_text='Which subtype or subtypes this creature has, if any.', max_length=100, null=True)),
                ('alignment', models.CharField(help_text="The creature's allowed alignments.", max_length=100)),
            ],
            options={
                'ordering': ['pk'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CreatureAction',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('uses_type', models.CharField(choices=[('PER_DAY', 'X/Day'), ('RECHARGE_ON_ROLL', 'Recharge X-6'), ('RECHARGE_AFTER_REST', 'Recharge after a Short or Long rest')], help_text='How use of the action is limited, if at all.', max_length=20, null=True)),
                ('uses_param', models.SmallIntegerField(help_text='The parameter X for if the action is limited.', null=True)),
                ('creature', models.ForeignKey(help_text='The creature to which this action belongs.', on_delete=django.db.models.deletion.CASCADE, to='api_v2.creature')),
            ],
            options={
                'verbose_name_plural': 'armor',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Document.', max_length=100, primary_key=True, serialize=False)),
                ('author', models.TextField(help_text='Author or authors.')),
                ('published_at', models.DateTimeField(help_text='Date of publication, or null if unknown.')),
                ('permalink', models.URLField(help_text='Link to the document.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('size', models.IntegerField(choices=[(1, 'Tiny'), (2, 'Small'), (3, 'Medium'), (4, 'Large'), (5, 'Huge'), (6, 'Gargantuan')], default=1, help_text='Integer representing the size of the object.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('weight', models.DecimalField(decimal_places=3, default=0, help_text='Number representing the weight of the object.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('armor_class', models.IntegerField(default=0, help_text='Integer representing the armor class of the object.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('hit_points', models.IntegerField(default=0, help_text='Integer representing the hit points of the object.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('cost', models.DecimalField(decimal_places=2, default=None, help_text='Number representing the cost of the object.', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('category', models.CharField(choices=[('staff', 'Staff'), ('rod', 'Rod'), ('scroll', 'Scroll'), ('potion', 'Potion'), ('wand', 'Wand'), ('wondrous-item', 'Wondrous item'), ('ring', 'Ring'), ('ammunition', 'Ammunition'), ('weapon', 'Weapon'), ('armor', 'Armor'), ('gem', 'Gem'), ('jewelry', 'Jewelry'), ('art', 'Art'), ('trade-good', 'Trade Good'), ('shield', 'Shield'), ('poison', 'Poison'), ('adventuring-gear', 'Adventuring gear'), ('tools', 'Tools')], help_text='The category of the magic item.', max_length=100)),
                ('requires_attunement', models.BooleanField(default=False, help_text='If the item requires attunement.')),
                ('rarity', models.IntegerField(blank=True, choices=[(1, 'common'), (2, 'uncommon'), (3, 'rare'), (4, 'very rare'), (5, 'legendary'), (6, 'artifact')], help_text='Integer representing the rarity of the object.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('armor', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='api_v2.armor')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'ordering': ['pk'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the License.', max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the publishing organization.', max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ruleset',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the ruleset the document was published for.', max_length=100, primary_key=True, serialize=False)),
                ('content_prefix', models.CharField(blank=True, help_text='Short code prepended to content keys.', max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('damage_type', models.CharField(choices=[('bludgeoning', 'bludgeoning'), ('piercing', 'piercing'), ('slashing', 'slashing')], help_text='The damage type dealt by attacks with the weapon.', max_length=100)),
                ('damage_dice', models.CharField(help_text='The damage dice when used making an attack.', max_length=100)),
                ('versatile_dice', models.CharField(default=0, help_text='The damage dice when attacking using versatile.\nA value of 0 means that the weapon does not have the versatile property.', max_length=100)),
                ('range_reach', models.IntegerField(default=5, help_text='The range of the weapon when making a melee attack.', validators=[django.core.validators.MinValueValidator(0)])),
                ('range_normal', models.IntegerField(default=0, help_text='The normal range of a ranged weapon attack.\nA value of 0 means that the weapon cannot be used for a ranged attack.', validators=[django.core.validators.MinValueValidator(0)])),
                ('range_long', models.IntegerField(default=0, help_text='The long range of a ranged weapon attack.\nA value of 0 means that the weapon cannot be used for a long ranged attack.', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_finesse', models.BooleanField(default=False, help_text='If the weapon is finesse.')),
                ('is_thrown', models.BooleanField(default=False, help_text='If the weapon is thrown.')),
                ('is_two_handed', models.BooleanField(default=False, help_text='If the weapon is two-handed.')),
                ('requires_ammunition', models.BooleanField(default=False, help_text='If the weapon requires ammunition.')),
                ('requires_loading', models.BooleanField(default=False, help_text='If the weapon requires loading.')),
                ('is_heavy', models.BooleanField(default=False, help_text='If the weapon is heavy.')),
                ('is_light', models.BooleanField(default=False, help_text='If the weapon is light.')),
                ('is_lance', models.BooleanField(default=False, help_text='If the weapon is a lance.')),
                ('is_net', models.BooleanField(default=False, help_text='If the weapon is a net.')),
                ('is_simple', models.BooleanField(default=False, help_text='If the weapon category is simple.')),
                ('is_improvised', models.BooleanField(default=False, help_text='If the weapon is improvised.')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemSet',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
                ('items', models.ManyToManyField(help_text='The set of items.', related_name='itemsets', to='api_v2.Item')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='item',
            name='weapon',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='api_v2.weapon'),
        ),
        migrations.AddField(
            model_name='document',
            name='licenses',
            field=models.ManyToManyField(help_text='Licenses that the content has been released under.', to='api_v2.License'),
        ),
        migrations.AddField(
            model_name='document',
            name='publisher',
            field=models.ForeignKey(help_text='Publisher which has written the game content document.', on_delete=django.db.models.deletion.CASCADE, to='api_v2.publisher'),
        ),
        migrations.AddField(
            model_name='document',
            name='ruleset',
            field=models.ForeignKey(help_text="The document's game system that it was published for.", on_delete=django.db.models.deletion.CASCADE, to='api_v2.ruleset'),
        ),
        migrations.CreateModel(
            name='CreatureAttack',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('attack_type', models.CharField(choices=[('SPELL', 'Spell'), ('WEAPON', 'Weapon')], help_text='Whether this is a Weapon or Spell attack.', max_length=20)),
                ('to_hit_mod', models.SmallIntegerField(help_text='Attack roll modifier.', validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('reach_ft', models.SmallIntegerField(help_text='Reach for melee attacks, in feet.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('range_ft', models.SmallIntegerField(help_text='Normal range for ranged attacks, in feet.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('long_range_ft', models.SmallIntegerField(help_text='Long range for ranged attacks, in feet.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('target_creature_only', models.BooleanField(help_text='If an attack can target creatures only and not objects.')),
                ('damage_die_count', models.SmallIntegerField(help_text='The number of dice to roll for damage.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('damage_die_type', models.CharField(choices=[('D4', 'd4'), ('D6', 'd6'), ('D8', 'd8'), ('D10', 'd10'), ('D12', 'd12'), ('D20', 'd20')], help_text='What kind of die to roll for damage.', max_length=20, null=True)),
                ('damage_bonus', models.SmallIntegerField(help_text='Damage roll modifier.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('damage_type', models.CharField(choices=[('ACID', 'Acid'), ('BLUDGEONING', 'Bludgeoning'), ('COLD', 'Cold'), ('FIRE', 'Fire'), ('FORCE', 'Force'), ('LIGHTNING', 'Lightning'), ('NECROTIC', 'Necrotic'), ('PIERCING', 'Piercing'), ('POISON', 'Poison'), ('PSYCHIC', 'Psychic'), ('RADIANT', 'Radiant'), ('SLASHING', 'Slashing'), ('THUNDER', 'Thunder')], help_text='What kind of damage this attack deals.', max_length=20, null=True)),
                ('extra_damage_die_count', models.SmallIntegerField(help_text='The number of dice to roll for damage.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('extra_damage_die_type', models.CharField(choices=[('D4', 'd4'), ('D6', 'd6'), ('D8', 'd8'), ('D10', 'd10'), ('D12', 'd12'), ('D20', 'd20')], help_text='What kind of die to roll for damage.', max_length=20, null=True)),
                ('extra_damage_bonus', models.SmallIntegerField(help_text='Damage roll modifier.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('extra_damage_type', models.CharField(choices=[('ACID', 'Acid'), ('BLUDGEONING', 'Bludgeoning'), ('COLD', 'Cold'), ('FIRE', 'Fire'), ('FORCE', 'Force'), ('LIGHTNING', 'Lightning'), ('NECROTIC', 'Necrotic'), ('PIERCING', 'Piercing'), ('POISON', 'Poison'), ('PSYCHIC', 'Psychic'), ('RADIANT', 'Radiant'), ('SLASHING', 'Slashing'), ('THUNDER', 'Thunder')], help_text='What kind of damage this attack deals.', max_length=20, null=True)),
                ('creature_action', models.ForeignKey(help_text='The creature action to which this attack belongs.', on_delete=django.db.models.deletion.CASCADE, to='api_v2.creatureaction')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='creatureaction',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document'),
        ),
        migrations.AddField(
            model_name='creature',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document'),
        ),
        migrations.AddField(
            model_name='armor',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document'),
        ),
    ]
